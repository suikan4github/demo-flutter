name: Release

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 などのタグにマッチ

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得してCHANGELOGを生成
        
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate release notes
      id: generate_notes
      run: |
        # CHANGELOGから該当バージョンのセクションを抽出
        if grep -q "## \[${{ steps.get_version.outputs.version }}\]" CHANGELOG.md; then
          awk '/^## \[${{ steps.get_version.outputs.version }}\]/,/^## \[/ {if (/^## \[/ && NR>1) exit; print}' CHANGELOG.md > release_notes.txt
        else
          echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### Changes" >> release_notes.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.txt || echo "- Initial release" >> release_notes.txt
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install Linux dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Enable platform support
      run: flutter config --enable-linux-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build application
      run: flutter build linux --release
      
    - name: Create archive
      run: |
        cd build/linux/x64/release/bundle
        tar -czf ../../../../../demo-flutter-${{ needs.create-release.outputs.version }}-linux-amd64.tar.gz .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: demo-flutter-${{ needs.create-release.outputs.version }}-linux-amd64.tar.gz
        asset_name: demo-flutter-${{ needs.create-release.outputs.version }}-linux-amd64.tar.gz
        asset_content_type: application/gzip

  build-deb:
    name: Build Debian Package
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev dpkg-dev fakeroot
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
        
    - name: Create Debian package structure
      id: create-deb
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        PKG_NAME="demo-flutter"
        PKG_DIR="${PKG_NAME}_${VERSION_NUM}_amd64"
        
        # Create package directory structure
        mkdir -p "${PKG_DIR}/DEBIAN"
        mkdir -p "${PKG_DIR}/usr/bin"
        mkdir -p "${PKG_DIR}/usr/share/applications"
        mkdir -p "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps"
        mkdir -p "${PKG_DIR}/usr/share/doc/${PKG_NAME}"
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* "${PKG_DIR}/usr/bin/"
        
        # Create control file
        cat > "${PKG_DIR}/DEBIAN/control" << EOF
        Package: ${PKG_NAME}
        Version: ${VERSION_NUM}
        Section: misc
        Priority: optional
        Architecture: amd64
        Depends: libgtk-3-0, libglib2.0-0, libgcc-s1
        Maintainer: suikan4github <suikan4github@users.noreply.github.com>
        Description: Demo Flutter Application
         A demonstration Flutter application for Linux Desktop.
         This package provides a simple counter application built with Flutter.
        Homepage: https://github.com/suikan4github/demo-flutter
        EOF
        
        # Create desktop file
        cat > "${PKG_DIR}/usr/share/applications/${PKG_NAME}.desktop" << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=Demo Flutter Application
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        StartupNotify=true
        EOF
        
        # Create icon (copy from web or create simple one)
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        else
          # Create simple icon placeholder
          echo "Creating placeholder icon..."
          touch "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        fi
        
        # Create copyright file
        cat > "${PKG_DIR}/usr/share/doc/${PKG_NAME}/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: demo-flutter
        Source: https://github.com/suikan4github/demo-flutter
        
        Files: *
        Copyright: 2025 suikan4github
        License: MIT
        
        License: MIT
         Permission is hereby granted, free of charge, to any person obtaining a copy
         of this software and associated documentation files (the "Software"), to deal
         in the Software without restriction, including without limitation the rights
         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         copies of the Software, and to permit persons to whom the Software is
         furnished to do so, subject to the following conditions:
         .
         The above copyright notice and this permission notice shall be included in
         all copies or substantial portions of the Software.
         .
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
         THE SOFTWARE.
        EOF
        
        # Create changelog
        cat > "${PKG_DIR}/usr/share/doc/${PKG_NAME}/changelog.Debian" << EOF
        ${PKG_NAME} (${VERSION_NUM}) unstable; urgency=medium
        
          * Release ${VERSION}
          * See upstream CHANGELOG.md for details
        
         -- suikan4github <suikan4github@users.noreply.github.com>  $(date -R)
        EOF
        gzip -9 "${PKG_DIR}/usr/share/doc/${PKG_NAME}/changelog.Debian"
        
        # Set permissions
        find "${PKG_DIR}" -type d -exec chmod 755 {} \;
        find "${PKG_DIR}" -type f -exec chmod 644 {} \;
        chmod 755 "${PKG_DIR}/usr/bin/demo_flutter"
        chmod 755 "${PKG_DIR}/DEBIAN"
        
        # Build package
        fakeroot dpkg-deb --build "${PKG_DIR}"
        
        # Rename to final filename
        mv "${PKG_DIR}.deb" "${PKG_NAME}-${VERSION}-linux-amd64.deb"
        
        echo "package-file=${PKG_NAME}-${VERSION}-linux-amd64.deb" >> $GITHUB_OUTPUT
        
    - name: Upload Debian Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-deb.outputs.package-file }}
        asset_name: ${{ steps.create-deb.outputs.package-file }}
        asset_content_type: application/vnd.debian.binary-package

  build-appimage:
    name: Build AppImage
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev imagemagick file
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
      
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
        
        # Create desktop file
        cat > AppDir/usr/share/applications/demo-flutter.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;
        EOF
        
        # Create a simple icon using ImageMagick
        convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -font DejaVu-Sans-Bold -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || {
          # Fallback: create icon without font specification
          convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || {
            # Final fallback: copy from web icons if available
            if [ -f "web/icons/Icon-512.png" ]; then
              cp web/icons/Icon-512.png AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
            else
              # Create minimal PNG manually
              echo "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANCSURBVHic7doxAQAAAMKg9U9tB2+geAMcQAABAiGjWwAAAABJRU5ErkJggg==" | base64 -d > AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
            fi
          }
        }
        
        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export LD_LIBRARY_PATH="${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
        exec "${HERE}/usr/bin/demo_flutter" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Create symlink for desktop file (required for AppImage)
        ln -sf usr/share/applications/demo-flutter.desktop AppDir/demo-flutter.desktop
        ln -sf usr/share/icons/hicolor/256x256/apps/demo-flutter.png AppDir/demo-flutter.png
        
    - name: Download and run appimagetool
      run: |
        # x86_64の場合
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Extract appimagetool to avoid FUSE issues in GitHub Actions
        ./appimagetool-x86_64.AppImage --appimage-extract
        
        # Use extracted appimagetool
        ./squashfs-root/AppRun AppDir demo-flutter-${{ needs.create-release.outputs.version }}-linux-amd64.AppImage
      
    - name: Upload AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: demo-flutter-${{ needs.create-release.outputs.version }}-linux-amd64.AppImage
        asset_name: demo-flutter-${{ needs.create-release.outputs.version }}-linux-amd64.AppImage
        asset_content_type: application/octet-stream

  build-rpm:
    name: Build RPM Package
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev rpm desktop-file-utils
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
        
    - name: Verify desktop-file-utils installation
      run: |
        echo "=== Checking desktop-file-utils installation ==="
        which desktop-file-install || (echo "desktop-file-utils not found" && exit 1)
        desktop-file-install --help | head -5
        echo "=== Checking RPM environment ==="
        rpm --version
      
    - name: Create RPM package structure
      id: create-rpm
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        PKG_NAME="demo-flutter"
        
        # Create RPM build structure
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        
        # Create source tarball
        TAR_NAME="${PKG_NAME}-${VERSION_NUM}"
        mkdir -p "/tmp/${TAR_NAME}"
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* "/tmp/${TAR_NAME}/"
        
        # Copy additional files for RPM
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "/tmp/${TAR_NAME}/demo-flutter.png"
        fi
        
        cd /tmp
        tar -czf "${TAR_NAME}.tar.gz" "${TAR_NAME}"
        mv "${TAR_NAME}.tar.gz" ~/rpmbuild/SOURCES/
        
        # Create desktop file
        cat > ~/rpmbuild/SOURCES/demo-flutter.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=Demo Flutter Application
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        StartupNotify=true
        EOF
        
        # Create spec file
        cat > ~/rpmbuild/SPECS/demo-flutter.spec << EOF
        Name:           demo-flutter
        Version:        ${VERSION_NUM}
        Release:        1%{?dist}
        Summary:        Demo Flutter Application
        
        License:        MIT
        URL:            https://github.com/suikan4github/demo-flutter
        Source0:        %{name}-%{version}.tar.gz
        Source1:        demo-flutter.desktop
        
        # Note: desktop-file-utils is installed in the environment
        # BuildRequires:  desktop-file-utils (removed to avoid dependency issues)
        Requires:       gtk3, glib2, libgcc
        
        %description
        A demonstration Flutter application for Linux Desktop.
        This package provides a simple counter application built with Flutter.
        
        %prep
        %setup -q
        
        %build
        # Nothing to build, binaries are pre-compiled
        
        %install
        rm -rf %{buildroot}
        
        # Install application
        mkdir -p %{buildroot}%{_bindir}
        mkdir -p %{buildroot}%{_datadir}/applications
        mkdir -p %{buildroot}%{_datadir}/icons/hicolor/256x256/apps
        
        # Copy application files
        cp -r * %{buildroot}%{_bindir}/
        
        # Install desktop file
        desktop-file-install --dir=%{buildroot}%{_datadir}/applications %{SOURCE1}
        
        # Install icon
        if [ -f "demo-flutter.png" ]; then
          cp demo-flutter.png %{buildroot}%{_datadir}/icons/hicolor/256x256/apps/demo-flutter.png
        fi
        
        %files
        %{_bindir}/*
        %{_datadir}/applications/demo-flutter.desktop
        %{_datadir}/icons/hicolor/256x256/apps/demo-flutter.png
        
        %post
        /bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null || :
        
        %postun
        if [ \$1 -eq 0 ] ; then
            /bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null
            /usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :
        fi
        
        %posttrans
        /usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :
        
        %changelog
        * $(date '+%a %b %d %Y') GitHub Actions <actions@github.com> - ${VERSION_NUM}-1
        - Release ${VERSION}
        - Automated build from GitHub Actions
        EOF
        
        # Build RPM (skip dependency check since we manually installed packages)
        echo "=== Building RPM ==="
        rpmbuild -bb --nodeps ~/rpmbuild/SPECS/demo-flutter.spec
        
        echo "=== Checking RPM build results ==="
        ls -la ~/rpmbuild/RPMS/ || echo "RPMS directory not found"
        find ~/rpmbuild -name "*.rpm" -type f || echo "No RPM files found"
        
        # Find the generated RPM
        RPM_FILE=$(find ~/rpmbuild/RPMS -name "*.rpm" -type f | head -1)
        
        if [ -z "$RPM_FILE" ]; then
          echo "ERROR: No RPM file generated"
          exit 1
        fi
        
        echo "Found RPM file: $RPM_FILE"
        RPM_BASENAME=$(basename "${RPM_FILE}")
        echo "RPM basename: $RPM_BASENAME"
        
        # Copy to workspace with absolute path
        WORKSPACE_RPM="${GITHUB_WORKSPACE}/demo-flutter-${VERSION}-linux-amd64.rpm"
        cp "${RPM_FILE}" "${WORKSPACE_RPM}"
        
        # Verify file exists
        ls -la "${WORKSPACE_RPM}"
        echo "Workspace RPM file: ${WORKSPACE_RPM}"
        
        echo "rpm-file=demo-flutter-${VERSION}-linux-amd64.rpm" >> $GITHUB_OUTPUT
        
    - name: Upload RPM Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-rpm.outputs.rpm-file }}
        asset_name: ${{ steps.create-rpm.outputs.rpm-file }}
        asset_content_type: application/x-rpm

  build-snap:
    name: Build Snap Package
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
      
    - name: Create Snap Package Manually
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        
        echo "=== Creating Snap package manually ==="
        
        # Create snap directory structure
        SNAP_DIR="snap-package"
        mkdir -p "$SNAP_DIR"/{bin,meta,usr/share/applications,usr/share/icons/hicolor/256x256/apps}
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* "$SNAP_DIR/bin/"
        
        # Create meta/snap.yaml
        cat > "$SNAP_DIR/meta/snap.yaml" << EOF
        name: demo-flutter
        version: ${VERSION_NUM}
        summary: Demo Flutter Application
        description: |
          A demonstration Flutter application for Linux Desktop.
          This package provides a simple counter application built with Flutter.
        grade: stable
        confinement: strict
        base: core20
        architectures:
          - amd64
        
        apps:
          demo-flutter:
            command: bin/demo_flutter
            plugs:
              - desktop
              - desktop-legacy
              - wayland
              - x11
              - opengl
              - audio-playback
              - network
              - home
        EOF
        
        # Create desktop file
        cat > "$SNAP_DIR/usr/share/applications/demo-flutter.desktop" << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=Demo Flutter Application
        Exec=demo-flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        StartupNotify=true
        EOF
        
        # Copy icon if available
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "$SNAP_DIR/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        else
          # Create simple placeholder icon (1x1 PNG)
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > "$SNAP_DIR/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        fi
        
        # Create the snap package as a compressed archive
        cd "$SNAP_DIR"
        tar -czf "../demo-flutter-${VERSION}-linux-amd64.snap" .
        cd ..
        
        # Verify the snap file was created
        ls -la "demo-flutter-${VERSION}-linux-amd64.snap"
        
    - name: Finalize Snap Package
      id: build-snap
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        
        # Find the snap file
        SNAP_FILE="demo-flutter-${VERSION}-linux-amd64.snap"
        WORKSPACE_SNAP="${GITHUB_WORKSPACE}/${SNAP_FILE}"
        
        # Check if file exists in current directory
        if [ -f "$SNAP_FILE" ]; then
          echo "Snap file found: $SNAP_FILE"
          # Move to workspace if not already there
          if [ "$PWD/$SNAP_FILE" != "$WORKSPACE_SNAP" ]; then
            mv "$SNAP_FILE" "$WORKSPACE_SNAP"
          fi
        elif [ -f "$WORKSPACE_SNAP" ]; then
          echo "Snap file already in workspace location"
        else
          echo "ERROR: Snap file not found!"
          ls -la
          exit 1
        fi
        
        # Verify file exists
        ls -la "$WORKSPACE_SNAP"
        echo "Workspace Snap file: ${WORKSPACE_SNAP}"
        
        echo "snap-file=${SNAP_FILE}" >> $GITHUB_OUTPUT
        
    - name: Upload Snap Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.build-snap.outputs.snap-file }}
        asset_name: ${{ steps.build-snap.outputs.snap-file }}
        asset_content_type: application/octet-stream

  build-windows-zip:
    name: Build Windows ZIP Package
    needs: create-release
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable Windows desktop support
      run: flutter config --enable-windows-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Windows application
      run: flutter build windows --release
      
    - name: Create ZIP archive
      run: |
        $version = "${{ needs.create-release.outputs.version }}"
        $archiveName = "demo-flutter-$version-windows-amd64.zip"
        Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath $archiveName
        echo "archive-name=$archiveName" >> $env:GITHUB_OUTPUT
      id: create-zip
      
    - name: Upload Windows ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-zip.outputs.archive-name }}
        asset_name: ${{ steps.create-zip.outputs.archive-name }}
        asset_content_type: application/zip

  build-windows-msix:
    name: Build Windows MSIX Package
    needs: create-release
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable Windows desktop support
      run: flutter config --enable-windows-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Create self-signed certificate for MSIX
      run: |
        # Create a self-signed certificate for MSIX packaging
        $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=Demo Flutter Publisher" -KeyUsage DigitalSignature -FriendlyName "Demo Flutter MSIX Certificate" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
        
        # Export the certificate to a .pfx file
        $password = ConvertTo-SecureString -String "temp_password_123" -Force -AsPlainText
        Export-PfxCertificate -cert $cert -FilePath "demo_flutter_cert.pfx" -Password $password
        
        Write-Host "Self-signed certificate created and exported to demo_flutter_cert.pfx"
      
    - name: Build Windows application
      run: flutter build windows --release
      
    - name: Create MSIX package
      run: |
        # Debug: Show current directory and files
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Files before MSIX creation:"
        Get-ChildItem -Name
        
        # Create MSIX package with automatic certificate installation
        Write-Host "Running dart run msix:create with automatic certificate installation..."
        
        # Use echo to automatically answer 'y' to certificate installation prompt
        echo "y" | dart run msix:create
        
        # Debug: Show files after MSIX creation
        Write-Host "Files after MSIX creation:"
        Get-ChildItem -Name
        
        # Check for MSIX file existence in both root and build directory
        $version = "${{ needs.create-release.outputs.version }}"
        
        # First check in root directory
        $msixFile = Get-ChildItem -Name "*.msix" | Select-Object -First 1
        
        if (-not $msixFile) {
            Write-Host "No MSIX file found in root directory, checking build subdirectory..."
            # Check in build directory where MSIX is typically created
            $msixPath = "build\windows\x64\runner\Release\*.msix"
            $buildMsixFiles = Get-ChildItem -Path $msixPath -ErrorAction SilentlyContinue
            
            if ($buildMsixFiles) {
                $msixFile = $buildMsixFiles[0].Name
                $msixFullPath = $buildMsixFiles[0].FullName
                Write-Host "Found MSIX file in build directory: $msixFullPath"
                
                # Copy MSIX file to root directory for easier handling
                Copy-Item $msixFullPath . -Force
                Write-Host "Copied MSIX file to root directory"
            }
        }
        
        if (-not $msixFile) {
            Write-Error "No MSIX file generated. Check msix:create output and msix_config configuration in pubspec.yaml."
            Write-Host "Available files:"
            Get-ChildItem -Recurse -Name "*.msix"
            
            # Check if MSIX files exist in subdirectories
            Write-Host "Searching for MSIX files in subdirectories:"
            Get-ChildItem -Recurse -Filter "*.msix" | ForEach-Object { Write-Host $_.FullName }
            exit 1
        }
        
        Write-Host "Found MSIX file: $msixFile"
        $newName = "demo-flutter-$version-windows-amd64.msix"
        Write-Host "Renaming to: $newName"
        Rename-Item $msixFile $newName
        echo "msix-file=$newName" >> $env:GITHUB_OUTPUT
      id: create-msix
        
    - name: Upload Windows MSIX Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-msix.outputs.msix-file }}
        asset_name: ${{ steps.create-msix.outputs.msix-file }}
        asset_content_type: application/octet-stream

  build-windows-installer:
    name: Build Windows Installer (Inno Setup)
    needs: create-release
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable Windows desktop support
      run: flutter config --enable-windows-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Windows application
      run: flutter build windows --release
      
    - name: Setup Inno Setup
      run: |
        Write-Host "Installing Inno Setup via Chocolatey..."
        choco install innosetup -y
        
        # Verify installation
        $innoPath = "C:\Program Files (x86)\Inno Setup 6\iscc.exe"
        if (Test-Path $innoPath) {
          Write-Host "Inno Setup installed successfully at: $innoPath"
          Write-Host "Inno Setup verification completed successfully"
        } else {
          Write-Error "Inno Setup installation failed"
          exit 1
        }
      
    - name: Create Inno Setup Script
      run: |
        $version = "${{ needs.create-release.outputs.version }}"
        $versionNum = $version -replace '^v', ''  # Remove 'v' prefix
        
        # Check if LICENSE file exists
        $licenseFile = ""
        if (Test-Path "LICENSE") {
          $licenseFile = "LicenseFile=LICENSE"
          Write-Host "LICENSE file found, will be included in installer"
        } else {
          Write-Host "LICENSE file not found, installer will proceed without license"
        }
        
        # Create the Inno Setup script
        $issContent = @"
        [Setup]
        AppName=Demo Flutter
        AppVersion=$versionNum
        AppVerName=Demo Flutter $versionNum
        AppPublisher=Demo Flutter Publisher
        AppPublisherURL=https://github.com/suikan4github/demo-flutter
        AppSupportURL=https://github.com/suikan4github/demo-flutter/issues
        AppUpdatesURL=https://github.com/suikan4github/demo-flutter/releases
        AppId={{A1B2C3D4-E5F6-7890-ABCD-EF1234567890}
        DefaultDirName={autopf}\Demo Flutter
        DefaultGroupName=Demo Flutter
        DisableProgramGroupPage=yes
        $licenseFile
        OutputDir=.
        OutputBaseFilename=demo-flutter-$version-windows-amd64-setup
        UninstallDisplayIcon={app}\demo_flutter.exe
        UninstallDisplayName=Demo Flutter
        Compression=lzma
        SolidCompression=yes
        PrivilegesRequired=admin
        ArchitecturesAllowed=x64
        ArchitecturesInstallIn64BitMode=x64
        
        [Languages]
        Name: "english"; MessagesFile: "compiler:Default.isl"
        Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
        
        [Tasks]
        Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
        Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode
        
        [Files]
        Source: "build\windows\x64\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
        ; NOTE: Don't use "Flags: ignoreversion" on any shared system files
        
        [Icons]
        Name: "{group}\Demo Flutter"; Filename: "{app}\demo_flutter.exe"
        Name: "{group}\{cm:ProgramOnTheWeb,Demo Flutter}"; Filename: "https://github.com/suikan4github/demo-flutter"
        Name: "{group}\{cm:UninstallProgram,Demo Flutter}"; Filename: "{uninstallexe}"
        Name: "{autodesktop}\Demo Flutter"; Filename: "{app}\demo_flutter.exe"; Tasks: desktopicon
        Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\Demo Flutter"; Filename: "{app}\demo_flutter.exe"; Tasks: quicklaunchicon
        
        [Run]
        Filename: "{app}\demo_flutter.exe"; Description: "{cm:LaunchProgram,Demo Flutter}"; Flags: nowait postinstall skipifsilent
        
        [UninstallDelete]
        Type: filesandordirs; Name: "{app}\data"
        
        [Code]
        function GetUninstallString(): String;
        var
          sUnInstPath: String;
          sUnInstallString: String;
        begin
          sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{{A1B2C3D4-E5F6-7890-ABCD-EF1234567890}_is1');
          sUnInstallString := '';
          if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
            RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
          Result := sUnInstallString;
        end;
        
        function IsUpgrade(): Boolean;
        begin
          Result := (GetUninstallString() <> '');
        end;
        
        function UnInstallOldVersion(): Integer;
        var
          sUnInstallString: String;
          iResultCode: Integer;
        begin
          Result := 0;
          if RegValueExists(HKEY_LOCAL_MACHINE,'Software\Microsoft\Windows\CurrentVersion\Uninstall\{{A1B2C3D4-E5F6-7890-ABCD-EF1234567890}_is1', 'UninstallString') then
          begin
            sUnInstallString := GetUninstallString();
            sUnInstallString := RemoveQuotes(sUnInstallString);
            if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
              Result := 3
            else
              Result := 2;
          end else
            Result := 1;
        end;
        
        procedure CurStepChanged(CurStep: TSetupStep);
        begin
          if (CurStep=ssInstall) then
          begin
            if (IsUpgrade()) then
            begin
              UnInstallOldVersion();
            end;
          end;
        end;
        
        "@
        
        # Write the script to file
        $issContent | Out-File -FilePath "demo-flutter.iss" -Encoding UTF8
        
        Write-Host "Inno Setup script created:"
        Get-Content "demo-flutter.iss" | Select-Object -First 25
        
    - name: Compile Installer
      run: |
        $version = "${{ needs.create-release.outputs.version }}"
        
        Write-Host "Compiling installer with Inno Setup..."
        $innoPath = "C:\Program Files (x86)\Inno Setup 6\iscc.exe"
        
        # Compile the installer
        & $innoPath "demo-flutter.iss"
        
        # Check if installer was created
        $expectedFile = "demo-flutter-$version-windows-amd64-setup.exe"
        if (Test-Path $expectedFile) {
          Write-Host "Installer created successfully: $expectedFile"
          Write-Host "File size: $((Get-Item $expectedFile).Length) bytes"
          echo "installer-file=$expectedFile" >> $env:GITHUB_OUTPUT
        } else {
          Write-Error "Installer compilation failed - file not found: $expectedFile"
          Write-host "Available files:"
          Get-ChildItem -Name "*.exe"
          exit 1
        }
      id: compile-installer
        
    - name: Upload Windows Installer Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.compile-installer.outputs.installer-file }}
        asset_name: ${{ steps.compile-installer.outputs.installer-file }}
        asset_content_type: application/octet-stream

  build-macos-zip:
    name: Build macOS x86_64 ZIP Package
    needs: create-release
    runs-on: macos-13  # Intel-based runner for x86_64 builds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable macOS desktop support
      run: |
        flutter config --enable-macos-desktop
        # Ensure macOS platform support is added to the project
        flutter create --platforms=macos .
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS x86_64 application
      run: |
        # Build on Intel runner for native x86_64 binary
        flutter build macos --release
      
    - name: Create ZIP archive
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        ARCHIVE_NAME="demo-flutter-${VERSION}-macos-amd64.zip"
        
        # Navigate to the build output directory
        cd build/macos/Build/Products/Release
        
        # Create ZIP archive of the .app bundle
        zip -r "../../../../../${ARCHIVE_NAME}" "demo_flutter.app"
        
        echo "archive-name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
      id: create-zip
      
    - name: Upload macOS ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-zip.outputs.archive-name }}
        asset_name: ${{ steps.create-zip.outputs.archive-name }}
        asset_content_type: application/zip

  build-macos-dmg:
    name: Build macOS x86_64 DMG Package
    needs: create-release
    runs-on: macos-13  # Intel-based runner for x86_64 builds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable macOS desktop support
      run: |
        flutter config --enable-macos-desktop
        # Ensure macOS platform support is added to the project
        flutter create --platforms=macos .
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS x86_64 application
      run: |
        # Build on Intel runner for native x86_64 binary
        flutter build macos --release
      
    - name: Create DMG package
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        DMG_NAME="demo-flutter-${VERSION}-macos-amd64.dmg"
        
        # Create a temporary directory for DMG contents
        DMG_DIR="dmg_temp"
        mkdir -p "$DMG_DIR"
        
        # Copy the .app bundle to the DMG directory
        cp -R "build/macos/Build/Products/Release/demo_flutter.app" "$DMG_DIR/"
        
        # Create Applications symlink for easy installation
        ln -s /Applications "$DMG_DIR/Applications"
        
        # Create a background image directory (optional)
        mkdir -p "$DMG_DIR/.background"
        
        # Create the DMG
        hdiutil create -volname "Demo Flutter ${VERSION_NUM} (x86_64)" \
                       -srcfolder "$DMG_DIR" \
                       -ov -format UDZO \
                       -imagekey zlib-level=9 \
                       "$DMG_NAME"
        
        # Clean up temporary directory
        rm -rf "$DMG_DIR"
        
        # Verify DMG was created
        if [ -f "$DMG_NAME" ]; then
          echo "DMG created successfully: $DMG_NAME"
          echo "File size: $(du -h "$DMG_NAME" | cut -f1)"
          echo "dmg-file=$DMG_NAME" >> $GITHUB_OUTPUT
        else
          echo "Error: DMG creation failed"
          exit 1
        fi
      id: create-dmg
      
    - name: Upload macOS DMG Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-dmg.outputs.dmg-file }}
        asset_name: ${{ steps.create-dmg.outputs.dmg-file }}
        asset_content_type: application/x-apple-diskimage

  build-macos-arm64-zip:
    name: Build macOS ARM64 ZIP Package
    needs: create-release
    runs-on: macos-latest  # Apple Silicon runner for ARM64 builds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable macOS desktop support
      run: |
        flutter config --enable-macos-desktop
        # Ensure macOS platform support is added to the project
        flutter create --platforms=macos .
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS ARM64 application
      run: |
        # Build on Apple Silicon runner for native ARM64 binary
        flutter build macos --release
      
    - name: Create ZIP archive
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        ARCHIVE_NAME="demo-flutter-${VERSION}-macos-arm64.zip"
        
        # Navigate to the build output directory
        cd build/macos/Build/Products/Release
        
        # Create ZIP archive of the .app bundle
        zip -r "../../../../../${ARCHIVE_NAME}" "demo_flutter.app"
        
        echo "archive-name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
      id: create-zip
      
    - name: Upload macOS ARM64 ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-zip.outputs.archive-name }}
        asset_name: ${{ steps.create-zip.outputs.archive-name }}
        asset_content_type: application/zip

  build-macos-arm64-dmg:
    name: Build macOS ARM64 DMG Package
    needs: create-release
    runs-on: macos-latest  # Apple Silicon runner for ARM64 builds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Enable macOS desktop support
      run: |
        flutter config --enable-macos-desktop
        # Ensure macOS platform support is added to the project
        flutter create --platforms=macos .
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS ARM64 application
      run: |
        # Build on Apple Silicon runner for native ARM64 binary
        flutter build macos --release
      
    - name: Create DMG package
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        DMG_NAME="demo-flutter-${VERSION}-macos-arm64.dmg"
        
        # Create a temporary directory for DMG contents
        DMG_DIR="dmg_temp"
        mkdir -p "$DMG_DIR"
        
        # Copy the .app bundle to the DMG directory
        cp -R "build/macos/Build/Products/Release/demo_flutter.app" "$DMG_DIR/"
        
        # Create Applications symlink for easy installation
        ln -s /Applications "$DMG_DIR/Applications"
        
        # Create a background image directory (optional)
        mkdir -p "$DMG_DIR/.background"
        
        # Create the DMG
        hdiutil create -volname "Demo Flutter ${VERSION_NUM} (ARM64)" \
                       -srcfolder "$DMG_DIR" \
                       -ov -format UDZO \
                       -imagekey zlib-level=9 \
                       "$DMG_NAME"
        
        # Clean up temporary directory
        rm -rf "$DMG_DIR"
        
        # Verify DMG was created
        if [ -f "$DMG_NAME" ]; then
          echo "DMG created successfully: $DMG_NAME"
          echo "File size: $(du -h "$DMG_NAME" | cut -f1)"
          echo "dmg-file=$DMG_NAME" >> $GITHUB_OUTPUT
        else
          echo "Error: DMG creation failed"
          exit 1
        fi
      id: create-dmg
      
    - name: Upload macOS ARM64 DMG Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-dmg.outputs.dmg-file }}
        asset_name: ${{ steps.create-dmg.outputs.dmg-file }}
        asset_content_type: application/x-apple-diskimage
