name: Release

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 などのタグにマッチ

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得してCHANGELOGを生成
        
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate release notes
      id: generate_notes
      run: |
        # CHANGELOGから該当バージョンのセクションを抽出
        if grep -q "## \[${{ steps.get_version.outputs.version }}\]" CHANGELOG.md; then
          awk '/^## \[${{ steps.get_version.outputs.version }}\]/,/^## \[/ {if (/^## \[/ && NR>1) exit; print}' CHANGELOG.md > release_notes.txt
        else
          echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### Changes" >> release_notes.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.txt || echo "- Initial release" >> release_notes.txt
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact-name: demo-flutter-linux-x64
            build-command: flutter build linux --release
            asset-path: build/linux/x64/release/bundle
            asset-name: demo-flutter-${{ needs.create-release.outputs.version }}-linux-x64.tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Enable platform support
      run: flutter config --enable-${{ matrix.platform }}-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build application
      run: ${{ matrix.build-command }}
      
    - name: Create archive
      run: |
        cd ${{ matrix.asset-path }}
        tar -czf ../../../../../${{ matrix.asset-name }} .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.asset-name }}
        asset_name: ${{ matrix.asset-name }}
        asset_content_type: application/gzip

  build-deb:
    name: Build Debian Package
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev dpkg-dev
        
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Create Debian package structure
      id: create_deb
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix
        PACKAGE_NAME="demo-flutter"
        PACKAGE_DIR="${PACKAGE_NAME}_${VERSION_NO_V}_amd64"
        
        # Create package directory structure
        mkdir -p "${PACKAGE_DIR}/DEBIAN"
        mkdir -p "${PACKAGE_DIR}/usr/bin"
        mkdir -p "${PACKAGE_DIR}/usr/share/applications"
        mkdir -p "${PACKAGE_DIR}/usr/share/icons/hicolor/256x256/apps"
        mkdir -p "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME}"
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* "${PACKAGE_DIR}/usr/bin/"
        
        # Create control file
        cat > "${PACKAGE_DIR}/DEBIAN/control" << EOF
        Package: ${PACKAGE_NAME}
        Version: ${VERSION_NO_V}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: suikan4github <suikan4github@users.noreply.github.com>
        Description: Demo Flutter Application
         A demonstration Flutter application showcasing cross-platform development.
         This package includes both the application and its dependencies.
        Depends: libgtk-3-0, libglib2.0-0, libgdk-pixbuf2.0-0
        Homepage: https://github.com/suikan4github/demo-flutter
        EOF
        
        # Create desktop file
        cat > "${PACKAGE_DIR}/usr/share/applications/${PACKAGE_NAME}.desktop" << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=A demonstration Flutter application
        Exec=/usr/bin/demo_flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        Terminal=false
        StartupWMClass=demo_flutter
        EOF
        
        # Create copyright file
        cat > "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME}/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: demo-flutter
        Source: https://github.com/suikan4github/demo-flutter
        
        Files: *
        Copyright: 2025 suikan4github
        License: MIT
        EOF
        
        # Create changelog
        cat > "${PACKAGE_NAME}/usr/share/doc/${PACKAGE_NAME}/changelog.Debian.gz" << EOF
        demo-flutter (${VERSION_NO_V}) unstable; urgency=medium
        
          * Release ${VERSION}
          * See https://github.com/suikan4github/demo-flutter/releases
        
         -- suikan4github <suikan4github@users.noreply.github.com>  $(date -R)
        EOF
        gzip "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME}/changelog.Debian.gz"
        
        # Create icon (use web icon if available)
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "${PACKAGE_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        else
          # Create simple icon with ImageMagick if available
          convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -annotate +0+0 "DF" "${PACKAGE_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png" 2>/dev/null || {
            # Create minimal PNG
            echo "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANCSURBVHic7doxAQAAAMKg9U9tB2+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAMcQAABAiGjWwAAAABJRU5ErkJggg==" | base64 -d > "${PACKAGE_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
          }
        fi
        
        # Set correct permissions
        chmod 755 "${PACKAGE_DIR}/usr/bin/demo_flutter"
        chmod 644 "${PACKAGE_DIR}/usr/share/applications/${PACKAGE_NAME}.desktop"
        chmod 644 "${PACKAGE_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        
        # Build the package
        dpkg-deb --build "${PACKAGE_DIR}"
        
        # Set output for next step
        echo "package_file=${PACKAGE_DIR}.deb" >> $GITHUB_OUTPUT
        
    - name: Upload Debian Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create_deb.outputs.package_file }}
        asset_name: demo-flutter-${{ needs.create-release.outputs.version }}-amd64.deb
        asset_content_type: application/vnd.debian.binary-package

  build-appimage:
    name: Build AppImage
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev imagemagick file
        
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
        
        # Create desktop file
        cat > AppDir/usr/share/applications/demo-flutter.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;
        EOF
        
        # Create a simple icon using ImageMagick
        convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -font DejaVu-Sans-Bold -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || {
          # Fallback: create icon without font specification
          convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || {
            # Final fallback: copy from web icons if available
            if [ -f "web/icons/Icon-512.png" ]; then
              cp web/icons/Icon-512.png AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
            else
              # Create minimal PNG manually
              echo "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANCSURBVHic7doxAQAAAMKg9U9tB2+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAMcQAABAiGjWwAAAABJRU5ErkJggg==" | base64 -d > AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
            fi
          }
        }
        
        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export LD_LIBRARY_PATH="${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
        exec "${HERE}/usr/bin/demo_flutter" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Create symlink for desktop file (required for AppImage)
        ln -sf usr/share/applications/demo-flutter.desktop AppDir/demo-flutter.desktop
        ln -sf usr/share/icons/hicolor/256x256/apps/demo-flutter.png AppDir/demo-flutter.png
        
    - name: Download and run appimagetool
      run: |
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Extract appimagetool to avoid FUSE issues in GitHub Actions
        ./appimagetool-x86_64.AppImage --appimage-extract
        
        # Use extracted appimagetool
        ./squashfs-root/AppRun AppDir demo-flutter-${{ needs.create-release.outputs.version }}-x86_64.AppImage
      
    - name: Upload AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: demo-flutter-${{ needs.create-release.outputs.version }}-x86_64.AppImage
        asset_name: demo-flutter-${{ needs.create-release.outputs.version }}-x86_64.AppImage
        asset_content_type: application/octet-stream
