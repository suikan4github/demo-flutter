name: Release

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 などのタグにマッチ

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得してCHANGELOGを生成
        
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate release notes
      id: generate_notes
      run: |
        # CHANGELOGから該当バージョンのセクションを抽出
        if grep -q "## \[${{ steps.get_version.outputs.version }}\]" CHANGELOG.md; then
          awk '/^## \[${{ steps.get_version.outputs.version }}\]/,/^## \[/ {if (/^## \[/ && NR>1) exit; print}' CHANGELOG.md > release_notes.txt
        else
          echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### Changes" >> release_notes.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.txt || echo "- Initial release" >> release_notes.txt
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target-arch: x86_64
            artifact-name: demo-flutter-linux-x64
            build-command: flutter build linux --release
            asset-path: build/linux/x64/release/bundle
            asset-name: demo-flutter-${{ needs.create-release.outputs.version }}-linux-x64.tar.gz
          - os: ubuntu-24.04-arm64
            platform: linux
            arch: arm64
            target-arch: aarch64
            artifact-name: demo-flutter-linux-arm64
            build-command: flutter build linux --release
            asset-path: build/linux/arm64/release/bundle
            asset-name: demo-flutter-${{ needs.create-release.outputs.version }}-linux-arm64.tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install Linux dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Enable platform support
      run: flutter config --enable-${{ matrix.platform }}-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build application
      run: ${{ matrix.build-command }}
      
    - name: Create archive
      run: |
        cd ${{ matrix.asset-path }}
        tar -czf ../../../../../${{ matrix.asset-name }} .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.asset-name }}
        asset_name: ${{ matrix.asset-name }}
        asset_content_type: application/gzip

  build-deb:
    name: Build Debian Package
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            target-arch: x86_64
          - os: ubuntu-24.04-arm64
            arch: arm64
            target-arch: aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev dpkg-dev fakeroot
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
        
    - name: Create Debian package structure
      id: create-deb
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        PKG_NAME="demo-flutter"
        PKG_DIR="${PKG_NAME}_${VERSION_NUM}_${{ matrix.arch }}"
        
        # Create package directory structure
        mkdir -p "${PKG_DIR}/DEBIAN"
        mkdir -p "${PKG_DIR}/usr/bin"
        mkdir -p "${PKG_DIR}/usr/share/applications"
        mkdir -p "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps"
        mkdir -p "${PKG_DIR}/usr/share/doc/${PKG_NAME}"
        
        # Copy application files (check both possible paths)
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          cp -r build/linux/arm64/release/bundle/* "${PKG_DIR}/usr/bin/"
        else
          cp -r build/linux/x64/release/bundle/* "${PKG_DIR}/usr/bin/"
        fi
        
        # Create control file
        cat > "${PKG_DIR}/DEBIAN/control" << EOF
        Package: ${PKG_NAME}
        Version: ${VERSION_NUM}
        Section: misc
        Priority: optional
        Architecture: ${{ matrix.arch }}
        Depends: libgtk-3-0, libglib2.0-0, libgcc-s1
        Maintainer: suikan4github <suikan4github@users.noreply.github.com>
        Description: Demo Flutter Application
         A demonstration Flutter application for Linux Desktop.
         This package provides a simple counter application built with Flutter.
        Homepage: https://github.com/suikan4github/demo-flutter
        EOF
        
        # Create desktop file
        cat > "${PKG_DIR}/usr/share/applications/${PKG_NAME}.desktop" << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=Demo Flutter Application
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        StartupNotify=true
        EOF
        
        # Create icon (copy from web or create simple one)
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        else
          # Create simple icon placeholder
          echo "Creating placeholder icon..."
          touch "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        fi
        
        # Create copyright file
        cat > "${PKG_DIR}/usr/share/doc/${PKG_NAME}/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: demo-flutter
        Source: https://github.com/suikan4github/demo-flutter
        
        Files: *
        Copyright: 2025 suikan4github
        License: MIT
        
        License: MIT
         Permission is hereby granted, free of charge, to any person obtaining a copy
         of this software and associated documentation files (the "Software"), to deal
         in the Software without restriction, including without limitation the rights
         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         copies of the Software, and to permit persons to whom the Software is
         furnished to do so, subject to the following conditions:
         .
         The above copyright notice and this permission notice shall be included in
         all copies or substantial portions of the Software.
         .
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
         THE SOFTWARE.
        EOF
        
        # Create changelog
        cat > "${PKG_DIR}/usr/share/doc/${PKG_NAME}/changelog.Debian" << EOF
        ${PKG_NAME} (${VERSION_NUM}) unstable; urgency=medium
        
          * Release ${VERSION}
          * See upstream CHANGELOG.md for details
        
         -- suikan4github <suikan4github@users.noreply.github.com>  $(date -R)
        EOF
        gzip -9 "${PKG_DIR}/usr/share/doc/${PKG_NAME}/changelog.Debian"
        
        # Set permissions
        find "${PKG_DIR}" -type d -exec chmod 755 {} \;
        find "${PKG_DIR}" -type f -exec chmod 644 {} \;
        chmod 755 "${PKG_DIR}/usr/bin/demo_flutter"
        chmod 755 "${PKG_DIR}/DEBIAN"
        
        # Build package
        fakeroot dpkg-deb --build "${PKG_DIR}"
        
        # Rename to final filename
        mv "${PKG_DIR}.deb" "${PKG_NAME}-${VERSION}-${{ matrix.arch }}.deb"
        
        echo "package-file=${PKG_NAME}-${VERSION}-${{ matrix.arch }}.deb" >> $GITHUB_OUTPUT
        
    - name: Upload Debian Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-deb.outputs.package-file }}
        asset_name: ${{ steps.create-deb.outputs.package-file }}
        asset_content_type: application/vnd.debian.binary-package

  build-appimage:
    name: Build AppImage
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            appimage-arch: x86_64
          - os: ubuntu-24.04-arm64
            arch: aarch64
            appimage-arch: aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev imagemagick file
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
      
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy application files (check both possible paths)
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cp -r build/linux/arm64/release/bundle/* AppDir/usr/bin/
        else
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
        fi
        
        # Create desktop file
        cat > AppDir/usr/share/applications/demo-flutter.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;
        EOF
        
        # Create a simple icon using ImageMagick
        convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -font DejaVu-Sans-Bold -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || {
          # Fallback: create icon without font specification
          convert -size 256x256 xc:'#2196F3' -fill white -gravity center -pointsize 72 -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || {
            # Final fallback: copy from web icons if available
            if [ -f "web/icons/Icon-512.png" ]; then
              cp web/icons/Icon-512.png AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
            else
              # Create minimal PNG manually
              echo "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANCSURBVHic7doxAQAAAMKg9U9tB2+geAMcQAABAiGjWwAAAABJRU5ErkJggg==" | base64 -d > AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
            fi
          }
        }
        
        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export LD_LIBRARY_PATH="${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
        exec "${HERE}/usr/bin/demo_flutter" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Create symlink for desktop file (required for AppImage)
        ln -sf usr/share/applications/demo-flutter.desktop AppDir/demo-flutter.desktop
        ln -sf usr/share/icons/hicolor/256x256/apps/demo-flutter.png AppDir/demo-flutter.png
        
    - name: Download and run appimagetool
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          # x86_64の場合
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Extract appimagetool to avoid FUSE issues in GitHub Actions
          ./appimagetool-x86_64.AppImage --appimage-extract
          
          # Use extracted appimagetool
          ./squashfs-root/AppRun AppDir demo-flutter-${{ needs.create-release.outputs.version }}-${{ matrix.arch }}.AppImage
        else
          # ARM64の場合、Dockerコンテナ内でAppImageを作成
          docker run --rm -v $PWD:/workspace -w /workspace --platform linux/arm64 \
            ubuntu:22.04 bash -c "
            set -e
            apt-get update -y
            apt-get install -y wget file
            
            # ARM64用のappimagetoolをダウンロード
            wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage -O appimagetool-aarch64.AppImage || {
              echo 'ARM64 appimagetool not available, using x86_64 version with QEMU'
              wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool-x86_64.AppImage
              chmod +x appimagetool-x86_64.AppImage
              ./appimagetool-x86_64.AppImage --appimage-extract
              ./squashfs-root/AppRun AppDir demo-flutter-${{ needs.create-release.outputs.version }}-${{ matrix.arch }}.AppImage
              exit 0
            }
            
            chmod +x appimagetool-aarch64.AppImage
            ./appimagetool-aarch64.AppImage --appimage-extract
            ./squashfs-root/AppRun AppDir demo-flutter-${{ needs.create-release.outputs.version }}-${{ matrix.arch }}.AppImage
          "
        fi
      
    - name: Upload AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: demo-flutter-${{ needs.create-release.outputs.version }}-${{ matrix.arch }}.AppImage
        asset_name: demo-flutter-${{ needs.create-release.outputs.version }}-${{ matrix.arch }}.AppImage
        asset_content_type: application/octet-stream

  build-rpm:
    name: Build RPM Package
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target-arch: x86_64
          - os: ubuntu-24.04-arm64
            arch: aarch64
            target-arch: aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev rpm desktop-file-utils
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
        
    - name: Verify desktop-file-utils installation
      run: |
        echo "=== Checking desktop-file-utils installation ==="
        which desktop-file-install || (echo "desktop-file-utils not found" && exit 1)
        desktop-file-install --help | head -5
        echo "=== Checking RPM environment ==="
        rpm --version
      
    - name: Create RPM package structure
      id: create-rpm
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        PKG_NAME="demo-flutter"
        
        # Create RPM build structure
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        
        # Create source tarball
        TAR_NAME="${PKG_NAME}-${VERSION_NUM}"
        mkdir -p "/tmp/${TAR_NAME}"
        
        # Copy application files (check both possible paths)
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cp -r build/linux/arm64/release/bundle/* "/tmp/${TAR_NAME}/"
        else
          cp -r build/linux/x64/release/bundle/* "/tmp/${TAR_NAME}/"
        fi
        
        # Copy additional files for RPM
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "/tmp/${TAR_NAME}/demo-flutter.png"
        fi
        
        cd /tmp
        tar -czf "${TAR_NAME}.tar.gz" "${TAR_NAME}"
        mv "${TAR_NAME}.tar.gz" ~/rpmbuild/SOURCES/
        
        # Create desktop file
        cat > ~/rpmbuild/SOURCES/demo-flutter.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=Demo Flutter Application
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        StartupNotify=true
        EOF
        
        # Create spec file
        cat > ~/rpmbuild/SPECS/demo-flutter.spec << EOF
        Name:           demo-flutter
        Version:        ${VERSION_NUM}
        Release:        1%{?dist}
        Summary:        Demo Flutter Application
        
        License:        MIT
        URL:            https://github.com/suikan4github/demo-flutter
        Source0:        %{name}-%{version}.tar.gz
        Source1:        demo-flutter.desktop
        
        # Note: desktop-file-utils is installed in the environment
        # BuildRequires:  desktop-file-utils (removed to avoid dependency issues)
        Requires:       gtk3, glib2, libgcc
        
        %description
        A demonstration Flutter application for Linux Desktop.
        This package provides a simple counter application built with Flutter.
        
        %prep
        %setup -q
        
        %build
        # Nothing to build, binaries are pre-compiled
        
        %install
        rm -rf %{buildroot}
        
        # Install application
        mkdir -p %{buildroot}%{_bindir}
        mkdir -p %{buildroot}%{_datadir}/applications
        mkdir -p %{buildroot}%{_datadir}/icons/hicolor/256x256/apps
        
        # Copy application files
        cp -r * %{buildroot}%{_bindir}/
        
        # Install desktop file
        desktop-file-install --dir=%{buildroot}%{_datadir}/applications %{SOURCE1}
        
        # Install icon
        if [ -f "demo-flutter.png" ]; then
          cp demo-flutter.png %{buildroot}%{_datadir}/icons/hicolor/256x256/apps/demo-flutter.png
        fi
        
        %files
        %{_bindir}/*
        %{_datadir}/applications/demo-flutter.desktop
        %{_datadir}/icons/hicolor/256x256/apps/demo-flutter.png
        
        %post
        /bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null || :
        
        %postun
        if [ \$1 -eq 0 ] ; then
            /bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null
            /usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :
        fi
        
        %posttrans
        /usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :
        
        %changelog
        * $(date '+%a %b %d %Y') GitHub Actions <actions@github.com> - ${VERSION_NUM}-1
        - Release ${VERSION}
        - Automated build from GitHub Actions
        EOF
        
        # Build RPM (skip dependency check since we manually installed packages)
        echo "=== Building RPM ==="
        rpmbuild -bb --nodeps ~/rpmbuild/SPECS/demo-flutter.spec
        
        echo "=== Checking RPM build results ==="
        ls -la ~/rpmbuild/RPMS/ || echo "RPMS directory not found"
        find ~/rpmbuild -name "*.rpm" -type f || echo "No RPM files found"
        
        # Find the generated RPM
        RPM_FILE=$(find ~/rpmbuild/RPMS -name "*.rpm" -type f | head -1)
        
        if [ -z "$RPM_FILE" ]; then
          echo "ERROR: No RPM file generated"
          exit 1
        fi
        
        echo "Found RPM file: $RPM_FILE"
        RPM_BASENAME=$(basename "${RPM_FILE}")
        echo "RPM basename: $RPM_BASENAME"
        
        # Copy to workspace with absolute path
        WORKSPACE_RPM="${GITHUB_WORKSPACE}/${PKG_NAME}-${VERSION}-1.${{ matrix.arch }}.rpm"
        cp "${RPM_FILE}" "${WORKSPACE_RPM}"
        
        # Verify file exists
        ls -la "${WORKSPACE_RPM}"
        echo "Workspace RPM file: ${WORKSPACE_RPM}"
        
        echo "rpm-file=${WORKSPACE_RPM}" >> $GITHUB_OUTPUT
        
    - name: Upload RPM Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-rpm.outputs.rpm-file }}
        asset_name: ${{ steps.create-rpm.outputs.rpm-file }}
        asset_content_type: application/x-rpm

  build-snap:
    name: Build Snap Package
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            target-arch: x86_64
          - os: ubuntu-24.04-arm64
            arch: arm64
            target-arch: aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Build application
      run: |
        flutter config --no-analytics
        flutter config --enable-linux-desktop
        flutter pub get
        flutter build linux --release
      
    - name: Create Snap Package Manually
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        
        echo "=== Creating Snap package manually ==="
        
        # Create snap directory structure
        SNAP_DIR="snap-package"
        mkdir -p "$SNAP_DIR"/{bin,meta,usr/share/applications,usr/share/icons/hicolor/256x256/apps}
        
        # Copy application files (check both possible paths)
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          cp -r build/linux/arm64/release/bundle/* "$SNAP_DIR/bin/"
        else
          cp -r build/linux/x64/release/bundle/* "$SNAP_DIR/bin/"
        fi
        
        # Create meta/snap.yaml
        cat > "$SNAP_DIR/meta/snap.yaml" << EOF
        name: demo-flutter
        version: ${VERSION_NUM}
        summary: Demo Flutter Application
        description: |
          A demonstration Flutter application for Linux Desktop.
          This package provides a simple counter application built with Flutter.
        grade: stable
        confinement: strict
        base: core20
        architectures:
          - ${{ matrix.arch }}
        
        apps:
          demo-flutter:
            command: bin/demo_flutter
            plugs:
              - desktop
              - desktop-legacy
              - wayland
              - x11
              - opengl
              - audio-playback
              - network
              - home
        EOF
        
        # Create desktop file
        cat > "$SNAP_DIR/usr/share/applications/demo-flutter.desktop" << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Comment=Demo Flutter Application
        Exec=demo-flutter
        Icon=demo-flutter
        Categories=Development;Utility;
        StartupNotify=true
        EOF
        
        # Copy icon if available
        if [ -f "web/icons/Icon-512.png" ]; then
          cp web/icons/Icon-512.png "$SNAP_DIR/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        else
          # Create simple placeholder icon (1x1 PNG)
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > "$SNAP_DIR/usr/share/icons/hicolor/256x256/apps/demo-flutter.png"
        fi
        
        # Create the snap package as a compressed archive
        cd "$SNAP_DIR"
        tar -czf "../demo-flutter_${VERSION_NUM}_${{ matrix.arch }}.snap" .
        cd ..
        
        # Verify the snap file was created
        ls -la "demo-flutter_${VERSION_NUM}_${{ matrix.arch }}.snap"
        
    - name: Finalize Snap Package
      id: build-snap
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        
        # Find the snap file
        SNAP_FILE="demo-flutter_${VERSION_NUM}_${{ matrix.arch }}.snap"
        WORKSPACE_SNAP="${GITHUB_WORKSPACE}/${SNAP_FILE}"
        
        # Check if file exists in current directory
        if [ -f "$SNAP_FILE" ] && [ "$PWD/$SNAP_FILE" != "$WORKSPACE_SNAP" ]; then
          echo "Moving snap file to workspace..."
          mv "$SNAP_FILE" "$WORKSPACE_SNAP"
        elif [ -f "$WORKSPACE_SNAP" ]; then
          echo "Snap file already in workspace location"
        else
          echo "ERROR: Snap file not found!"
          ls -la
          exit 1
        fi
        
        # Verify file exists
        ls -la "$WORKSPACE_SNAP"
        echo "Workspace Snap file: ${WORKSPACE_SNAP}"
        
        echo "snap-file=${WORKSPACE_SNAP}" >> $GITHUB_OUTPUT
        
    - name: Upload Snap Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.build-snap.outputs.snap-file }}
        asset_name: demo-flutter_${{ needs.create-release.outputs.version }}_${{ matrix.arch }}.snap
        asset_content_type: application/octet-stream
