name: Release

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 などのタグにマッチ

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得してCHANGELOGを生成
        
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate release notes
      id: generate_notes
      run: |
        # CHANGELOGから該当バージョンのセクションを抽出
        if grep -q "## \[${{ steps.get_version.outputs.version }}\]" CHANGELOG.md; then
          awk '/^## \[${{ steps.get_version.outputs.version }}\]/,/^## \[/ {if (/^## \[/ && NR>1) exit; print}' CHANGELOG.md > release_notes.txt
        else
          echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### Changes" >> release_notes.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.txt || echo "- Initial release" >> release_notes.txt
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact-name: demo-flutter-linux-x64
            build-command: flutter build linux --release
            asset-path: build/linux/x64/release/bundle
            asset-name: demo-flutter-${{ needs.create-release.outputs.version }}-linux-x64.tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Enable platform support
      run: flutter config --enable-${{ matrix.platform }}-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build application
      run: ${{ matrix.build-command }}
      
    - name: Create archive
      run: |
        cd ${{ matrix.asset-path }}
        tar -czf ../../../../../${{ matrix.asset-name }} .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.asset-name }}
        asset_name: ${{ matrix.asset-name }}
        asset_content_type: application/gzip

  build-appimage:
    name: Build AppImage
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy application files
        cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
        
        # Create desktop file
        cat > AppDir/usr/share/applications/demo-flutter.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Demo Flutter
        Exec=demo_flutter
        Icon=demo-flutter
        Categories=Utility;
        EOF
        
        # Copy icon (use default Flutter icon if custom icon doesn't exist)
        if [ -f "assets/icons/app_icon.png" ]; then
          cp assets/icons/app_icon.png AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png
        else
          # Create a simple placeholder icon
          convert -size 256x256 xc:blue -fill white -gravity center -pointsize 72 -annotate +0+0 "DF" AppDir/usr/share/icons/hicolor/256x256/apps/demo-flutter.png || true
        fi
        
        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export LD_LIBRARY_PATH="${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
        exec "${HERE}/usr/bin/demo_flutter" "$@"
        EOF
        chmod +x AppDir/AppRun
        
    - name: Download and run appimagetool
      run: |
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        ./appimagetool-x86_64.AppImage AppDir demo-flutter-${{ needs.create-release.outputs.version }}-x86_64.AppImage
      
    - name: Upload AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: demo-flutter-${{ needs.create-release.outputs.version }}-x86_64.AppImage
        asset_name: demo-flutter-${{ needs.create-release.outputs.version }}-x86_64.AppImage
        asset_content_type: application/octet-stream
